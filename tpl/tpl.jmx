<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="{{.API.HTTPName}}" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="{{.API.HTTPDomain}}" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">{{.Config.ThreadGroup.ActionToBeTakenAfterASamplerError}}</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">{{.Config.ThreadGroup.LoopCount}}</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">{{.Config.ThreadGroup.NumThreads}}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">{{.Config.ThreadGroup.RampTime}}</stringProp>
        <boolProp name="ThreadGroup.scheduler">{{.Config.ThreadGroup.SpecifyThreadLifetime}}</boolProp>
        <stringProp name="ThreadGroup.duration">{{.Config.ThreadGroup.Duration}}</stringProp>
        <stringProp name="ThreadGroup.delay">{{.Config.ThreadGroup.StartupDelay}}</stringProp>
        <boolProp name="ThreadGroup.delayedStart">{{.Config.ThreadGroup.DelayThreadCreationUntilNeeded}}</boolProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">{{.Config.ThreadGroup.SameUserOnEachIteration}}</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="{{.API.HTTPName}}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{{.API.HTTPBody.JSON.JSONStr}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">{{.API.HTTPDomain}}</stringProp>
          <stringProp name="HTTPSampler.protocol">{{.Config.HttpRequest.Protocol}}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">{{.API.HTTPPath}}</stringProp>
          <stringProp name="HTTPSampler.method">{{.API.HTTPMethod}}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">{{.Config.HttpRequest.FollowRedirects}}</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">{{.Config.HttpRequest.RedirectAutomatically}}</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">{{.Config.HttpRequest.UseKeepAlive}}</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">{{.Config.HttpRequest.UseMultipartFormData}}</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">{{.Config.HttpRequest.BrowserCompatibleHeaders}}</boolProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              {{range .Config.HttpRequest.HTTPDefaultHeaders}}
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">{{.Key}}</stringProp>
                <stringProp name="Header.value">{{.Value}}</stringProp>
              </elementProp>
              {{end}}
              {{range .API.HTTPHeaders}}
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">{{.Key}}</stringProp>
                <stringProp name="Header.value">{{.Value}}</stringProp>
              </elementProp>
              {{end}}
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>

        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV 数据文件设置" enabled="true">
          <stringProp name="delimiter">{{.Config.CsvDataSetConfig.Delimiter}}</stringProp>
          <stringProp name="fileEncoding">{{.Config.CsvDataSetConfig.FileEncoding}}</stringProp>
          <stringProp name="variableNames">{{.CSVVariableNamesParamsStr}}</stringProp>
          <stringProp name="filename">{{.Config.CsvDataSetConfig.FileNamePrefix }}/{{.CSVFileName}}</stringProp>
          <boolProp name="ignoreFirstLine">{{.Config.CsvDataSetConfig.IgnoreFirstLine}}</boolProp>
          <boolProp name="quotedData">{{.Config.CsvDataSetConfig.AllowQuotedData}}</boolProp>
          <boolProp name="recycle">{{.Config.CsvDataSetConfig.Recycle}}</boolProp>
          <stringProp name="shareMode">{{.Config.CsvDataSetConfig.ShareMode}}</stringProp>
          <boolProp name="stopThread">{{.Config.CsvDataSetConfig.StopThread}}</boolProp>
        </CSVDataSet>
        {{if .Config.BackendListener.Enable}}
        <hashTree/>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="后端监听器" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="influxdbMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
                <stringProp name="Argument.value">{{.Config.BackendListener.Influxdb.InfluxdbMetricsSender}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxdbUrl" elementType="Argument">
                <stringProp name="Argument.name">influxdbUrl</stringProp>
                <stringProp name="Argument.value">{{.Config.BackendListener.Influxdb.InfluxdbUrl}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="application" elementType="Argument">
                <stringProp name="Argument.name">application</stringProp>
                <stringProp name="Argument.value">{{.Config.BackendListener.Influxdb.Application}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="measurement" elementType="Argument">
                <stringProp name="Argument.name">measurement</stringProp>
                <stringProp name="Argument.value">{{.Config.BackendListener.Influxdb.Measurement}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">{{.Config.BackendListener.Influxdb.SummaryOnly}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersRegex" elementType="Argument">
                <stringProp name="Argument.name">samplersRegex</stringProp>
                <stringProp name="Argument.value">{{.Config.BackendListener.Influxdb.SamplersRegex}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">{{.Config.BackendListener.Influxdb.Percentiles}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="testTitle" elementType="Argument">
                <stringProp name="Argument.name">testTitle</stringProp>
                <stringProp name="Argument.value">{{.Config.BackendListener.Influxdb.TestTitle}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventTags" elementType="Argument">
                <stringProp name="Argument.name">eventTags</stringProp>
                <stringProp name="Argument.value">{{.Config.BackendListener.Influxdb.EventTags}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">{{.Config.BackendListener.BackendListenerImplementation}}</stringProp>
        </BackendListener>
        <hashTree/>
        {{end}}
        {{if .Config.ViewResultsTree.Enable}}
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="查看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">{{.Config.ViewResultsTree.FileNamePrefix }}/{{.ViewResultsTreeFileName}}</stringProp>
        </ResultCollector>
        <hashTree/>
        {{end}}
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
